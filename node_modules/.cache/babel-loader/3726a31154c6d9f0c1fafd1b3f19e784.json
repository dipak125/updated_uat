{"ast":null,"code":"import axios from \"../../shared/axios\";\nimport { AUTH_START, AUTH_SUCCESS, AUTH_FAIL, AUTH_LOGOUT } from \"../actions/actionTypes\";\n\nconst authStart = () => {\n  return {\n    type: AUTH_START\n  };\n};\n\nconst authFail = error => {\n  return {\n    type: AUTH_FAIL,\n    error: error\n  };\n};\n\nconst authSuccess = ({\n  token,\n  user,\n  permission,\n  lastAction\n}) => {\n  return {\n    type: AUTH_SUCCESS,\n    idToken: token,\n    user,\n    permission,\n    lastAction\n  };\n};\n\nconst checkLastActionPerformed = actionTime => {\n  //console.log('actionTime', actionTime);\n  //console.log(parseInt(actionTime));\n  const now = Date.now();\n  const timeleft = parseInt(actionTime) + 60 * 60 * 1000; // 60 mins until auto logout\n\n  const diff = timeleft - now;\n  const isTimeout = diff < 0; //console.log('diff', diff);\n  //console.log('isTimeout', isTimeout);\n\n  if (isTimeout) {\n    //console.log('Logout');\n    return false;\n  } //console.log('Continue...');\n\n\n  return true;\n};\n\nexport const authLogout = () => {\n  localStorage.removeItem('auth_token');\n  localStorage.removeItem('users');\n  return {\n    type: AUTH_LOGOUT\n  };\n};\nexport const authProcess = (data, onSuccess, onFailure) => {\n  return dispatch => {\n    // Auth Start\n    dispatch(authStart()); // Auth Processing\n\n    const formData = new FormData();\n    formData.append('email', data.emailAddress);\n    formData.append('password', data.password);\n    axios.post('/login', formData).then(response => {\n      dispatch(authSuccess(response.data));\n      let loginData;\n\n      if (data.rememberMe == '1') {\n        loginData = {\n          email: data.emailAddress,\n          pass: data.password,\n          rememberMe: data.rememberMe\n        };\n      } else {\n        loginData = {\n          email: '',\n          pass: '',\n          rememberMe: ''\n        };\n      }\n\n      localStorage.setItem('auth_token', response.data.token_type + \" \" + response.data.token); // localStorage.setItem('users', JSON.stringify({ user: response.data.user, permission: response.data.permission, lastAction: Date.now() }));\n\n      localStorage.setItem('users', JSON.stringify({\n        user: response.data.user_data,\n        permission: [],\n        lastAction: Date.now()\n      }));\n      localStorage.setItem('loginData', JSON.stringify(loginData));\n      onSuccess && onSuccess();\n    }).catch(error => {\n      dispatch(authFail(error));\n      onFailure && onFailure(error);\n    });\n  };\n};\nexport const authValidate = () => {\n  return dispatch => {\n    const token = localStorage.getItem('auth_token');\n\n    if (token) {\n      const users = localStorage.getItem('users');\n\n      if (users) {\n        const items = JSON.parse(users); // Checking last action performed time\n\n        if (checkLastActionPerformed(items.lastAction) === true) {\n          // renewing the last action time\n          localStorage.setItem('users', JSON.stringify({\n            user: items.user,\n            permission: items.permission,\n            lastAction: Date.now()\n          }));\n          dispatch(authSuccess({\n            token,\n            user: items.user,\n            permission: items.permission,\n            lastAction: items.lastAction\n          }));\n        } else {\n          dispatch(authLogout());\n        }\n      } else {\n        dispatch(authLogout());\n      }\n    } else {\n      dispatch(authLogout());\n    }\n  };\n};","map":{"version":3,"sources":["/var/www/html/sbig-csc/portal/src/store/actions/auth.jsx"],"names":["axios","AUTH_START","AUTH_SUCCESS","AUTH_FAIL","AUTH_LOGOUT","authStart","type","authFail","error","authSuccess","token","user","permission","lastAction","idToken","checkLastActionPerformed","actionTime","now","Date","timeleft","parseInt","diff","isTimeout","authLogout","localStorage","removeItem","authProcess","data","onSuccess","onFailure","dispatch","formData","FormData","append","emailAddress","password","post","then","response","loginData","rememberMe","email","pass","setItem","token_type","JSON","stringify","user_data","catch","authValidate","getItem","users","items","parse"],"mappings":"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","sourcesContent":["import axios from \"../../shared/axios\";\r\n\r\nimport { \r\n    AUTH_START, \r\n    AUTH_SUCCESS, \r\n    AUTH_FAIL,\r\n    AUTH_LOGOUT \r\n} from \"../actions/actionTypes\";\r\n\r\nconst authStart = () => {\r\n    return {\r\n        type: AUTH_START\r\n    }\r\n}\r\n\r\nconst authFail = ( error ) => {\r\n    return {\r\n        type: AUTH_FAIL,\r\n        error: error\r\n    }\r\n}\r\n\r\nconst authSuccess = ({ token, user, permission, lastAction}) => {\r\n    return {\r\n        type: AUTH_SUCCESS,\r\n        idToken: token,\r\n        user,\r\n        permission,\r\n        lastAction\r\n    }\r\n}\r\n\r\nconst checkLastActionPerformed = (actionTime) => {\r\n    //console.log('actionTime', actionTime);\r\n    //console.log(parseInt(actionTime));\r\n    const now = Date.now();\r\n    const timeleft = parseInt(actionTime) + 60 * 60 * 1000;   // 60 mins until auto logout\r\n    const diff = timeleft - now;\r\n    const isTimeout = diff < 0;\r\n    //console.log('diff', diff);\r\n    //console.log('isTimeout', isTimeout);\r\n    if (isTimeout) {\r\n        //console.log('Logout');\r\n        return false;\r\n    }\r\n    //console.log('Continue...');\r\n    return true;\r\n}\r\n\r\nexport const authLogout = () => {\r\n    localStorage.removeItem('auth_token');\r\n    localStorage.removeItem('users');\r\n\r\n    return {\r\n        type: AUTH_LOGOUT\r\n    }\r\n}\r\n\r\nexport const authProcess = (data, onSuccess, onFailure) => {\r\n    return dispatch => {\r\n        // Auth Start\r\n        dispatch(authStart());\r\n        // Auth Processing\r\n        const formData = new FormData();\r\n        formData.append('email', data.emailAddress);\r\n        formData.append('password', data.password);\r\n        axios\r\n            .post('/login', formData)\r\n            .then(response => {\r\n                dispatch(authSuccess(response.data));\r\n                let loginData;\r\n                if(data.rememberMe == '1') {\r\n                    loginData = {email: data.emailAddress, pass: data.password, rememberMe: data.rememberMe};\r\n                } else {\r\n                    loginData = {email: '', pass: '', rememberMe: ''};\r\n                }\r\n                localStorage.setItem('auth_token', response.data.token_type+\" \"+response.data.token);\r\n                // localStorage.setItem('users', JSON.stringify({ user: response.data.user, permission: response.data.permission, lastAction: Date.now() }));\r\n                localStorage.setItem('users', JSON.stringify({ user: response.data.user_data, permission: [], lastAction: Date.now() }));\r\n                localStorage.setItem('loginData', JSON.stringify( loginData ));\r\n                onSuccess && onSuccess();\r\n            })\r\n            .catch(error => {\r\n                dispatch(authFail(error));\r\n                onFailure && onFailure(error);\r\n            })\r\n    }\r\n}\r\n\r\nexport const authValidate = () => {\r\n    return dispatch => {\r\n\r\n        const token = localStorage.getItem('auth_token');\r\n        if (token) {\r\n            const users = localStorage.getItem('users');\r\n            if (users) {\r\n                const items = JSON.parse(users);                \r\n\r\n                // Checking last action performed time\r\n                if(checkLastActionPerformed(items.lastAction) === true) {\r\n                    // renewing the last action time\r\n                    localStorage.setItem('users', JSON.stringify({ user: items.user, permission: items.permission, lastAction: Date.now() }));                    \r\n                    dispatch(authSuccess({ token, user: items.user, permission: items.permission, lastAction: items.lastAction }));\r\n                } else {\r\n                    dispatch(authLogout());\r\n                }\r\n            } else {\r\n                dispatch(authLogout());\r\n            }\r\n        } else {\r\n            dispatch(authLogout());\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}