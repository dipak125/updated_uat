{"ast":null,"code":"var _jsxFileName = \"/var/www/html/sbig-csc/portal/src/component/common/login/LogIn.jsx\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { loaderStart, loaderStop } from \"../../../store/actions/loader\";\nimport { Row, Col, Button } from \"react-bootstrap\";\nimport { Formik, Field, Form } from \"formik\";\nimport * as Yup from \"yup\";\nimport \"./LogIn.css\";\nimport { authProcess } from \"../../../store/actions/auth\";\nimport BaseComponent from '../../BaseComponent';\nconst initialValues = {\n  emailAddress: \"\",\n  password: \"\"\n};\nconst loginvalidation = Yup.object().shape({\n  emailAddress: Yup.string().email(\"Please enter a valid email\").required(\"Please enter email id\"),\n  password: Yup.string().required(\"Please enter password\")\n});\n\nclass LogIn extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      email: '',\n      pass: '',\n      rememberMe: 0,\n      errMsg: null\n    };\n\n    this.rememberMeHandler = e => {\n      if (e.target.checked === true) {\n        this.setState({\n          rememberMe: 1\n        });\n      } else {\n        this.setState({\n          rememberMe: 0\n        });\n      }\n    };\n\n    this.handleSubmit = (values, actions) => {\n      //console.log('values', values); return false;\n      this.props.loadingStart();\n      values.rememberMe = this.state.rememberMe;\n      this.setState({\n        errMsg: ''\n      });\n      this.props.onFormSubmit(values, () => {\n        this.props.loadingStop();\n        this.props.history.push('/Products');\n      }, err => {\n        this.props.loadingStop();\n        actions.setSubmitting(false);\n\n        if (err.data.message) {\n          this.setState({\n            errMsg: err.data.message\n          });\n          actions.resetForm();\n        } else {\n          // console.log(err.data);\n          actions.setErrors(err.data);\n        }\n      });\n    };\n  }\n\n  componentDidMount() {\n    let bodyClass = [];\n    bodyClass.length && document.body.classList.remove(...bodyClass);\n    document.body.classList.add(\"loginBody\"); // check remember me option\n\n    const loginData = JSON.parse(localStorage.getItem('loginData'));\n\n    if (loginData) {\n      this.setState({\n        email: loginData.email,\n        pass: loginData.pass,\n        rememberMe: loginData.rememberMe ? 1 : 0\n      });\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.match.path === '/login' && !nextProps.loading) {\n      this.props.history.push('/user-list');\n    }\n  }\n\n  render() {\n    //console.log('state', this.state);\n    const _this$state = this.state,\n          email = _this$state.email,\n          pass = _this$state.pass,\n          rememberMe = _this$state.rememberMe;\n    const newInitialValues = Object.assign(initialValues, {\n      emailAddress: email ? email : '',\n      password: pass ? pass : ''\n    });\n    return React.createElement(BaseComponent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"d-flex justify-content-center brand m-t-60\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"login-box-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(Formik, {\n      initialValues: newInitialValues,\n      validationSchema: loginvalidation,\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, ({\n      values,\n      errors,\n      isValid,\n      touched,\n      isSubmitting\n    }) => {\n      return React.createElement(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, this.state.errMsg ? React.createElement(Row, {\n        className: \"show-grid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(Col, {\n        md: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"errorMsg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, this.state.errMsg))) : null, React.createElement(Row, {\n        className: \"show-grid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(Col, {\n        md: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, \"Email ID\"), React.createElement(Field, {\n        name: \"emailAddress\",\n        type: \"text\",\n        className: \"form-control\",\n        placeholder: \"Email\",\n        autoComplete: \"off\",\n        value: values.emailAddress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }), errors.emailAddress && touched.emailAddress ? React.createElement(\"span\", {\n        className: \"errorMsg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, errors.emailAddress) : null)), React.createElement(Col, {\n        md: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, \"Password\"), React.createElement(Field, {\n        name: \"password\",\n        type: \"password\",\n        className: \"form-control\",\n        autoComplete: \"off\",\n        placeholder: \"Password\",\n        value: values.password,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }), errors.password && touched.password ? React.createElement(\"span\", {\n        className: \"errorMsg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, errors.password) : null))), React.createElement(Row, {\n        className: \"show-grid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, React.createElement(Col, {\n        xs: 8,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"checkbox icheck loginRemember\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"customCkBox\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"checkbox\",\n        checked: rememberMe ? true : false,\n        value: rememberMe,\n        onChange: this.rememberMeHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"checkmark\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      })), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, \"Remember Me\"))), React.createElement(Col, {\n        xs: 4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"submit\",\n        className: \"btn btn-default btn-md \".concat(isSubmitting ? \"btn-disable\" : \"btn-custom-red\", \" pull-right\"),\n        disabled: isSubmitting ? true : false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, isSubmitting ? \"Signing In...\" : \"Sign In\"))));\n    }))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    // loading: state.auth.loading,\n    token: state.auth.token\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onFormSubmit: (data, onSuccess, onFailure) => dispatch(authProcess(data, onSuccess, onFailure)),\n    loadingStart: () => dispatch(loaderStart()),\n    loadingStop: () => dispatch(loaderStop())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LogIn);","map":{"version":3,"sources":["/var/www/html/sbig-csc/portal/src/component/common/login/LogIn.jsx"],"names":["React","Component","connect","loaderStart","loaderStop","Row","Col","Button","Formik","Field","Form","Yup","authProcess","BaseComponent","initialValues","emailAddress","password","loginvalidation","object","shape","string","email","required","LogIn","state","pass","rememberMe","errMsg","rememberMeHandler","e","target","checked","setState","handleSubmit","values","actions","props","loadingStart","onFormSubmit","loadingStop","history","push","err","setSubmitting","data","message","resetForm","setErrors","componentDidMount","bodyClass","length","document","body","classList","remove","add","loginData","JSON","parse","localStorage","getItem","componentWillReceiveProps","nextProps","match","path","loading","render","newInitialValues","Object","assign","errors","isValid","touched","isSubmitting","mapStateToProps","token","auth","mapDispatchToProps","dispatch","onSuccess","onFailure"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { loaderStart, loaderStop } from \"../../../store/actions/loader\";\r\nimport {\r\n    Row,\r\n    Col,\r\n    Button\r\n} from \"react-bootstrap\";\r\n\r\nimport { Formik, Field, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport \"./LogIn.css\";\r\nimport { authProcess } from \"../../../store/actions/auth\";\r\nimport BaseComponent from '../../BaseComponent';\r\n\r\nconst initialValues = {\r\n    emailAddress: \"\",\r\n    password: \"\"\r\n};\r\n\r\nconst loginvalidation = Yup.object().shape({\r\n    emailAddress: Yup.string()\r\n        .email(\"Please enter a valid email\")\r\n        .required(\"Please enter email id\"),\r\n    password: Yup.string().required(\"Please enter password\")\r\n});\r\n\r\nclass LogIn extends Component {\r\n    state = {\r\n        email: '',\r\n        pass: '',\r\n        rememberMe: 0,\r\n        errMsg: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        let bodyClass = [];\r\n        bodyClass.length && document.body.classList.remove(...bodyClass);\r\n        document.body.classList.add(\"loginBody\");\r\n\r\n        // check remember me option\r\n        const loginData = JSON.parse(localStorage.getItem('loginData'));\r\n        if(loginData) {\r\n            this.setState({ \r\n                email: loginData.email, \r\n                pass: loginData.pass, \r\n                rememberMe: loginData.rememberMe ? 1 : 0\r\n            });\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps.match.path === '/login' && !nextProps.loading) {\r\n            this.props.history.push('/user-list');\r\n        }\r\n    }\r\n\r\n    rememberMeHandler = (e) => {\r\n        if(e.target.checked === true) {\r\n            this.setState({ rememberMe: 1 });\r\n        } else {\r\n            this.setState({ rememberMe: 0 });\r\n        }\r\n    }\r\n\r\n    handleSubmit = (values, actions) => {\r\n        //console.log('values', values); return false;\r\n        this.props.loadingStart();\r\n        values.rememberMe = this.state.rememberMe;\r\n        this.setState({ errMsg: '' });\r\n        \r\n        this.props.onFormSubmit(values, \r\n            () => {\r\n                this.props.loadingStop();\r\n                this.props.history.push('/Products');\r\n            },\r\n            (err) => {\r\n                this.props.loadingStop();\r\n                actions.setSubmitting(false);                \r\n                if (err.data.message) {\r\n                    this.setState({ errMsg: err.data.message });\r\n                    actions.resetForm();\r\n                } else {\r\n                    // console.log(err.data);\r\n                    actions.setErrors(err.data);\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    render() {\r\n        //console.log('state', this.state);\r\n        const {email, pass, rememberMe} = this.state;\r\n\r\n        const newInitialValues = Object.assign(initialValues, {\r\n            emailAddress: email ? email : '',\r\n            password: pass ? pass : ''\r\n        });\r\n        return (\r\n            <BaseComponent>\r\n            <div className=\"d-flex justify-content-center brand m-t-60\">\r\n                <div className=\"login-box-body\">\r\n                    {/* <p className=\"login-box-msg\">Sign in</p> */}\r\n                    <Formik\r\n                        initialValues={newInitialValues}\r\n                        validationSchema={loginvalidation}\r\n                        onSubmit={this.handleSubmit}\r\n                    >\r\n                        {({ values, errors, isValid, touched, isSubmitting }) => {\r\n                            return (\r\n                                <Form>\r\n                                    {this.state.errMsg ? (\r\n                                        <Row className=\"show-grid\">\r\n                                            <Col md={12}>\r\n                                                <div className=\"errorMsg\">{this.state.errMsg}</div>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    ) : null}\r\n                                    <Row className=\"show-grid\">\r\n                                        <Col md={12}>\r\n                                            <div className=\"form-group\">\r\n                                                <label>Email ID</label>\r\n                                                <Field\r\n                                                    name=\"emailAddress\"\r\n                                                    type=\"text\"\r\n                                                    className={`form-control`}\r\n                                                    placeholder=\"Email\"\r\n                                                    autoComplete=\"off\"\r\n                                                    value={values.emailAddress}\r\n                                                />\r\n                                                {errors.emailAddress && touched.emailAddress ? (\r\n                                                    <span className=\"errorMsg\">{errors.emailAddress}</span>\r\n                                                ) : null}\r\n                                            </div>\r\n                                        </Col>\r\n                                        <Col md={12}>\r\n                                            <div className=\"form-group\">\r\n                                                <label>Password</label>\r\n                                                <Field\r\n                                                    name=\"password\"\r\n                                                    type=\"password\"\r\n                                                    className={`form-control`}\r\n                                                    autoComplete=\"off\"\r\n                                                    placeholder=\"Password\"\r\n                                                    value={values.password}\r\n                                                />\r\n                                                {errors.password && touched.password ? (\r\n                                                    <span className=\"errorMsg\">{errors.password}</span>\r\n                                                ) : null}\r\n                                            </div>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row className=\"show-grid\">\r\n                                        <Col xs={8}>\r\n                                            <div className=\"checkbox icheck loginRemember\">\r\n                                                <label className=\"customCkBox\">\r\n                                                    <input \r\n                                                        type=\"checkbox\" \r\n                                                        checked={rememberMe ? true : false}\r\n                                                        value={rememberMe}\r\n                                                        onChange={this.rememberMeHandler}\r\n                                                    />\r\n                                                    <span className=\"checkmark\" />\r\n                                                </label>\r\n                                                <label>Remember Me</label>\r\n                                            </div>\r\n                                        </Col>\r\n                                        <Col xs={4}>\r\n                                            <Button\r\n                                                type=\"submit\"\r\n                                                className={`btn btn-default btn-md ${\r\n                                                    isSubmitting ? \"btn-disable\" : \"btn-custom-red\"\r\n                                                    } pull-right`}\r\n                                                disabled={isSubmitting ? true : false}\r\n                                            >\r\n                                                {isSubmitting ? \"Signing In...\" : \"Sign In\"}\r\n                                            </Button>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Form>\r\n                            );\r\n                        }}\r\n                    </Formik>\r\n                </div>\r\n            </div>\r\n        </BaseComponent>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        // loading: state.auth.loading,\r\n        token: state.auth.token\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onFormSubmit: (data, onSuccess, onFailure) => dispatch(authProcess(data, onSuccess, onFailure)),\r\n        loadingStart: () => dispatch(loaderStart()),\r\n        loadingStop: () => dispatch(loaderStop())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LogIn);\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}