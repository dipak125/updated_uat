import React, { Component } from 'react';
import { Row, Col, Modal, Button, FormGroup, OverlayTrigger, Tooltip } from 'react-bootstrap';
import DatePicker from "react-datepicker";
import BaseComponent from '.././BaseComponent';
import SideNav from '../common/side-nav/SideNav';
import Footer from '../common/footer/Footer';
// import ReactTooltip from "react-tooltip";
import { Formik, Field, Form, FieldArray } from "formik";
import * as Yup from "yup";

import axios from "../../shared/axios";
import { withRouter } from 'react-router-dom';
import { loaderStart, loaderStop } from "../../store/actions/loader";
import { connect } from "react-redux";
import { changeFormat, get18YearsBeforeDate, PersonAge } from "../../shared/dateFunctions";
import dateformat from "dateformat";
import moment from "moment";

import "react-datepicker/dist/react-datepicker.css"
import 'react-datepicker/dist/react-datepicker-cssmodules.min.css'

const maxDob = dateformat(new Date(), 'mm/dd/yyyy');

const initialFamilyDetails = {
	fname: "",
	lname: "",
	dob: new Date(),
    gender: "",	
    family_member_id:0,
    looking_for:''
};

const initialValues = {
    proposerAsInsured: "",
    family_members:[initialFamilyDetails],
    panNo: "",
    phoneNo: "",
    email: "",
    address1: "",
    address2: "",
    address3: "",
    pincode: "",
    area: "",
    state: "",
    eIA: ""
    };

const validateAddress =  Yup.object().shape({
    proposerAsInsured: Yup.string()
        .required(function() {
            return "Please select a value"
        }),    
    address1: Yup.string()
        .required(function() {
            return "Enter plot number."
        }),
    address2: Yup.string()
        .required(function() {
            return "Enter building name / number"
        }),
    address3: Yup.string()
        .required(function() {
            return "Enter street name"
        }),
    email: Yup.string()
        .required( function() {
            return "Please enter email"
        })
        .email( function() {
            return "Please enter valid email"
        }),
    
    phoneNo: Yup.string()
        .required(function() {
            return "Please enter phone number"
        })
        .matches(/^([0-9\s\-\+\(\)]*)$/, function() {
            return "Invalid number"
        })
        .min(8, function() {
            return "Phone number should be minimum 8 digits"
        })
        .max(12, function() {
            return "Phone number should be maximum 12 digits"
        }),
   
    panNo: Yup.string()
        .required(function() {
            return "Enter PAN number"
        }),
    pincode: Yup.string()
        .required(function() {
            return "Enter pin code"
        }),

    area: Yup.string()
        .required(function() {
            return "Select area"
        }),
    state: Yup.string()
        .required(function() {
            return "Enter stater"
        }),
    eIA: Yup.string()
        .required(function() {
            return "Select eIA option"
        }),
    family_members: Yup.array().of(
            Yup.object().shape({
                fname: Yup.string().required("Required First name"),
                lname: Yup.string().required("Required Last name"),
                dob: Yup.date().required("Please enter DOB").max(maxDob, function() {
                    return "Date should not be future date"
                })
                .test(
                    "18YearsChecking",
                    function() {
                        return "Age sgould me minium 18 years"
                    },
                    function (value) {
                        if (value) {
                            const ageObj = new PersonAge();
                            return ageObj.whatIsMyAge(value) >= 18;
                        }
                        return true;
                    }
                ),
                gender: Yup.string().nullable().required("Require Gender"),        

            })     
    )

});

const validateFirstName=(str)=>{
    let error;
    if(str == ''){
        error = 'Please enter the name';
    }
    return error;    
}

class Address extends Component {

  
    constructor(props) {
		super(props)
		this.state = {
            familyMembers:[],
            addressDetails:{},
            is_eia_account:''
		}
	}

    


    changePlaceHoldClassAdd(e) {
        let element = e.target.parentElement;
        element.classList.add('active');
    }

    componentDidMount(){       
        this.fetchData();
       // console.log("zzzzzz======>",productId)
    }

    fetchData=()=>{
        const {productId } = this.props.match.params
        let policyHolder_id = localStorage.getItem("policyHolder_id");
        axios.get(`policy-holder/${policyHolder_id}`)
            .then(res=>{
                //console.log("aaaaaabbbbbir========>",response.data.data.policyHolder.request_data.family_members)
                let family_members = res.data.data.policyHolder.request_data.family_members
                let addressDetails = JSON.parse(res.data.data.policyHolder.address)
                let is_eia_account = res.data.data.policyHolder.is_eia_account
                this.setState({ 
                    familyMembers:family_members,
                    addressDetails,
                    is_eia_account
                })
                
            })
            .catch(function (error) {
                // handle error
                console.log(error);
            })
    }

    changePlaceHoldClassRemove(e) {
        let element = e.target.parentElement;
        e.target.value.length === 0 && element.classList.remove('active');
    }

    sumInsured = (productId) => {
        this.props.history.push(`/SelectDuration/${productId}`);
    }

    handleSubmit = (values) => {
        const {productId } = this.props.match.params
        const policyHolder_id =  localStorage.getItem('policyHolder_id');
        const formData = new FormData();
        
        formData.append('policy_holder_id',policyHolder_id);
        const family_members = values.family_members;
        let proposerAsInsured = values.proposerAsInsured;
        sessionStorage.setItem('proposed_insured',proposerAsInsured);

        for(let i=0;i<family_members.length;i++){
            formData.append(`looking_for[${i}]`, family_members[i].looking_for);
            formData.append(`family_member_id[${i}]`, family_members[i].family_member_id);
            formData.append(`gender[${i}]`, family_members[i].gender);
            formData.append(`first_name[${i}]`, family_members[i].fname);
            formData.append(`last_name[${i}]`, family_members[i].lname);
            formData.append(`dob[${i}]`, moment(family_members[i].dob).format("YYYY-MM-DD"));
          //  formData.append(`pancard_no[${i}]`, values.panNo);
         //   formData.append(`pancard_no[${i}]`, values.panNo);
        }  
        let email = values.email;
        sessionStorage.setItem('email_data',email);
        formData.append('is_eia_account',values.eIA);
        sessionStorage.setItem('pan_data',values.panNo);
        let address_object = {}
        Object.assign(address_object,{
            address1:values.address1,
            address2:values.address2,
            address3:values.address3,
            area:values.area,
            phoneNo:values.phoneNo,
            pincode:values.pincode,
            state:values.state,
        })
        formData.append('communication_address',JSON.stringify(address_object));
        this.props.loadingStop();
        axios
        .post(`/insured-member-details`, formData)
        .then(res => {
           // if(res.data.completedStep == 4){
                this.props.history.push(`/NomineeDetails/${productId}`);
           // }        
        })
        .catch(err => {
        
        this.props.loadingStop();
        });

       
        //console.log("Values =======> ",values);


       // const {productId} = this.props.match.params


    }

    initFamilyDetailsList = familyDetails => {
		if (familyDetails.length > 0) {
			return familyDetails.map(resource => ({
				fname: resource.first_name ? resource.first_name:'',
				lname: resource.last_name ? resource.last_name:'',
				dob: resource.dob,
                gender: resource.gender ?  resource.gender:'',
                looking_for: resource.relation_with,
                family_member_id: resource.id,
                pancard_no:resource.pancard_no
			}));
		} else {
			return [initialFamilyDetails];
		}
	};

    render() {
        const {familyMembers,addressDetails,is_eia_account} = this.state    
        console.log("ADDRESS DETAILS======>",is_eia_account)
        let newInitialValues = Object.assign(initialValues, {
            proposerAsInsured: sessionStorage.getItem('proposed_insured') ? sessionStorage.getItem('proposed_insured') : "",
            family_members:this.initFamilyDetailsList(
                familyMembers
            ),
            panNo: sessionStorage.getItem('pan_data') ? sessionStorage.getItem('pan_data') : "" ,
            phoneNo: addressDetails && addressDetails.phoneNo ? addressDetails.phoneNo: "",
            email: sessionStorage.getItem('email_data') ? sessionStorage.getItem('email_data') : "",
            address1: addressDetails && addressDetails.address1 ? addressDetails.address1: "",
            address2: addressDetails && addressDetails.address2 ? addressDetails.address2:  "",
            address3: addressDetails && addressDetails.address3 ? addressDetails.address3: "",
            pincode: addressDetails && addressDetails.pincode ? addressDetails.pincode: "",
            area: addressDetails && addressDetails.area ? addressDetails.area: "",
            state: addressDetails && addressDetails.state ? addressDetails.state: "",
            eIA: is_eia_account ?  is_eia_account : 0
        });



        console.log("NNNNNNN--=--->",this.state)
        const {productId} = this.props.match.params
        console.log("Family Members ------>",familyMembers)
        return (
            <>
                <BaseComponent>
                    <div className="container-fluid">
                        <div className="row">
                            <div className="col-sm-12 col-md-12 col-lg-2 col-xl-2 pd-l-0">
                                <SideNav />
                            </div>
                            <div className="col-sm-12 col-md-12 col-lg-10 col-xl-10 infobox">
                                <h4 className="text-center mt-3 mb-3">Arogya Sanjeevani Policy</h4>
                                <section className="brand">
                                    <div className="boxpd">

                                    <Formik initialValues={newInitialValues} onSubmit={this.handleSubmit} 
                                    validationSchema={validateAddress}
                                    >
                                    {({ values, errors, setFieldValue, setFieldTouched, isValid, isSubmitting, touched }) => {
                                        
                                    return (
                                    <Form>
                                        <div className="d-flex justify-content-left align-items-center">
                                            <div className="proposr m-r-60"><p>Is the Proposer same as insured</p></div>
                                            <div className="d-inline-flex">
                                                <div className="p-r-25">
                                                    <label className="customRadio3">
                                                    <Field
                                                        type="radio"
                                                        name='proposerAsInsured'                                            
                                                        value='1'
                                                        key='0'  
                                                        onChange={(e) => {
                                                            setFieldValue(`proposerAsInsured`, e.target.value);
                                                        }}
                                                        checked={values.proposerAsInsured == '1' ? true : false}
                                                    />
                                                        <span className="checkmark " /><span className="fs-14"> Yes</span>
                                                    </label>
                                                </div>

                                                <div className="">
                                                    <label className="customRadio3">
                                                    <Field
                                                        type="radio"
                                                        name='proposerAsInsured'                                            
                                                        value='0'
                                                        key='0'  
                                                        onChange={(e) => {
                                                            setFieldValue(`proposerAsInsured`, e.target.value);
                                                        }}
                                                        checked={values.proposerAsInsured == '0' ? true : false}
                                                    />
                                                        <span className="checkmark" />
                                                        <span className="fs-14">No</span>
                                                        {errors.proposerAsInsured && touched.proposerAsInsured ? (
                                                        <span className="errorMsg">{errors.proposerAsInsured}</span>
                                                    ) : null}
                                                    </label>
                                                </div>
                                            </div>
                                        </div>
                                        <div className="d-flex justify-content-left carloan m-b-25">
                                            <h4> Tell us more about the Insured Members</h4>
                                        </div>

                                       
                                                        
                                        <Row>
                                            <Col sm={12} md={9} lg={9}>
                                            <>
                                            <FieldArray
                                                name="family_members"
                                                render={arrayHelpers => (
                                                    <div>
                                            {familyMembers && familyMembers.length>0 && familyMembers.map((resource,index)=> 
                                                    <div className="d-flex justify-content-left prsnlinfo">
                                                        <div className="W12">
                                                            {resource.relation_with}
                                                            <Field
                                                                name={`family_members.${index}.family_member_id`}
                                                                type="hidden"
                                                                value={values.family_members[index].family_member_id}
                                                            />
                                                            <Field
                                                                name={`family_members.${index}.looking_for`}
                                                                type="hidden"
                                                                value={values.family_members[index].looking_for}
                                                            />
                                                        </div>
                                                        <Row>
                                                        <Col sm={12} md={3} lg={3}>
                                                            <FormGroup>
                                                                <div className="insurerName">
                                                                    <Field
                                                                        name={`family_members.${index}.fname`}
                                                                        type="text"
                                                                        placeholder="First Name"
                                                                        autoComplete="off"
                                                                        onFocus={e => this.changePlaceHoldClassAdd(e)}
                                                                        onBlur={e => this.changePlaceHoldClassRemove(e)}
                                                                        value = {values.family_members[index].fname}
                                                                    />
                                                                     {errors.family_members && errors.family_members[index] && errors.family_members[index].fname ? (
                                                                    <span className="errorMsg">{errors.family_members[index].fname}</span>
                                                                    ) : null}
                                                                </div>
                                                            </FormGroup>
                                                        </Col>
                                                        <Col sm={12} md={3} lg={3}>
                                                            <FormGroup>
                                                                <div className="insurerName">
                                                                    <Field
                                                                            name={`family_members.${index}.lname`}
                                                                            type="text"
                                                                            placeholder="Last Name"
                                                                            autoComplete="off"
                                                                            onFocus={e => this.changePlaceHoldClassAdd(e)}
                                                                            onBlur={e => this.changePlaceHoldClassRemove(e)}
                                                                            value = {values.family_members[index].lname}                                                                            
                                                                    />
                                                                     {errors.family_members && errors.family_members[index] && errors.family_members[index].lname ? (
                                                                    <span className="errorMsg">{errors.family_members[index].lname}</span>
                                                                    ) : null}
                                                                </div>
                                                            </FormGroup>
                                                        </Col>
                                                        <Col sm={12} md={3} lg={3}>
                                                            <FormGroup>
                                                                <DatePicker
                                                                    name={`family_members.${index}.dob`}
                                                                    minDate={new Date()}
                                                                    dateFormat="dd MMM yyyy"
                                                                    placeholderText="DOB"
                                                                    peekPreviousMonth
                                                                    peekPreviousYear
                                                                    showMonthDropdown
                                                                    showYearDropdown
                                                                    dropdownMode="select"
                                                                    maxDate={new Date()}
                                                                    minDate={new Date(1/1/1900)}
                                                                    className="datePckr"
                                                                    selected={values.family_members[index].dob ? new Date(values.family_members[index].dob):new Date()}
                                                                    onChange={(val) => {
                                                                        console.log("MOLK----->",val)
                                                                        setFieldTouched(`family_members.${index}.dob`);
                                                                        setFieldValue(`family_members.${index}.dob`, val);
                                                                      }}
                                                                      
                                                                    //selected={moment(values.family_members[index].dob).format("dd MMM yyyy")}
                                                                    
                                                                />
                                                                {errors.family_members && errors.family_members[index] && errors.family_members[index].dob ? (
                                                                    <span className="errorMsg">{errors.family_members[index].dob}</span>
                                                                ) : null}  
                                                            </FormGroup>
                                                        </Col>
                                                        <Col sm={12} md={3} lg={3}>
                                                            <FormGroup>
                                                                <div className="formSection">
                                                                    <Field
                                                                        name={`family_members.${index}.gender`}
                                                                        component="select"
                                                                        autoComplete="off"                                                                        
                                                                        className="formGrp"
                                                                    >
                                                                    <option value="">Select gender</option>
                                                                        <option value="m">Male</option>
                                                                        <option value="f">Female</option>
                                                                    </Field>     
                                                                    {errors.family_members && errors.family_members[index] && errors.family_members[index].gender ? (
                                                                    <span className="errorMsg">{errors.family_members[index].gender}</span>
                                                                ) : null}                   
                                                                </div>
                                                            </FormGroup>
                                                        </Col>
                                                        </Row>   
                                                    </div>
                                                    )}                                                
                                                    </div>
                                                )}/>
                                                </>
                                                <Row className="m-b-25">
                                                    <Col sm={12} md={4} lg={4}>
                                                        <div className="insurerName">
                                                            <Field
                                                                name="panNo"
                                                                type="text"
                                                                placeholder="PAN NO"
                                                                autoComplete="off"
                                                                onFocus={e => this.changePlaceHoldClassAdd(e)}
                                                                onBlur={e => this.changePlaceHoldClassRemove(e)}
                                                                value={values.panNo}
                                                            />
                                                            {errors.panNo && touched.panNo ? (
                                                            <span className="errorMsg">{errors.panNo}</span>
                                                            ) : null}                                        
                                                        </div>
                                                    </Col>
                                                    <Col sm={12} md={4} lg={4}>
                                                        <div className="insurerName">
                                                            <Field
                                                                name="phoneNo"
                                                                type="number"
                                                                placeholder="PHONE NO"
                                                                autoComplete="off"
                                                                onFocus={e => this.changePlaceHoldClassAdd(e)}
                                                                onBlur={e => this.changePlaceHoldClassRemove(e)}
                                                                value={values.phoneNo}
                                                            />
                                                            {errors.phoneNo && touched.phoneNo ? (
                                                            <span className="errorMsg">{errors.phoneNo}</span>
                                                            ) : null}  
                                                        </div>
                                                    </Col>
                                                    <Col sm={12} md={4} lg={4}>
                                                        <div className="insurerName">
                                                        <Field
                                                            name="email"
                                                            type="text"
                                                            placeholder="EMAIL"
                                                            autoComplete="off"
                                                            onFocus={e => this.changePlaceHoldClassAdd(e)}
                                                            onBlur={e => this.changePlaceHoldClassRemove(e)}
                                                            value={values.email}
                                                        />
                                                        {errors.email && touched.email ? (
                                                        <span className="errorMsg">{errors.email}</span>
                                                        ) : null}  
                                                        </div>
                                                    </Col>
                                                </Row>

                                                <div className="d-flex justify-content-left carloan">
                                                    <h4> Communication Address</h4>
                                                </div>

                                                <Row className="m-b-45">
                                                    <Col sm={12} md={4} lg={4}>
                                                        <FormGroup>
                                                            <div className="insurerName">
                                                                <Field
                                                                    name="address1"
                                                                    type="text"
                                                                    placeholder="Plot / Flat No."
                                                                    autoComplete="off"
                                                                    onFocus={e => this.changePlaceHoldClassAdd(e)}
                                                                    onBlur={e => this.changePlaceHoldClassRemove(e)}
                                                                    value={values.address1}
                                                                />
                                                                {errors.address1 && touched.address1 ? (
                                                                <span className="errorMsg">{errors.address1}</span>
                                                                ) : null}                                                             
                                                            </div>
                                                        </FormGroup>
                                                    </Col>
                                                    <Col sm={12} md={4} lg={4}>
                                                        <FormGroup>
                                                            <div className="insurerName">
                                                                <Field
                                                                    name="address2"
                                                                    type="text"
                                                                    placeholder="Building Name / Number"
                                                                    autoComplete="off"
                                                                    onFocus={e => this.changePlaceHoldClassAdd(e)}
                                                                    onBlur={e => this.changePlaceHoldClassRemove(e)}
                                                                    value={values.address2}
                                                                />
                                                                {errors.address2 && touched.address2 ? (
                                                                <span className="errorMsg">{errors.address2}</span>
                                                                ) : null}       
                                                            </div>
                                                        </FormGroup>
                                                    </Col>
                                                    <Col sm={12} md={4} lg={4}>
                                                        <FormGroup>
                                                            <div className="insurerName">
                                                                <Field
                                                                    name="address3"
                                                                    type="text"
                                                                    placeholder="Street Name"
                                                                    autoComplete="off"
                                                                    onFocus={e => this.changePlaceHoldClassAdd(e)}
                                                                    onBlur={e => this.changePlaceHoldClassRemove(e)}
                                                                    value={values.address3}
                                                                />
                                                                {errors.address3 && touched.address3 ? (
                                                                <span className="errorMsg">{errors.address3}</span>
                                                                ) : null}       
                                                            </div>
                                                        </FormGroup>
                                                    </Col>
                                                    <Col sm={12} md={4} lg={4}>
                                                        <FormGroup>
                                                            <div className="insurerName">
                                                                <Field
                                                                    name="pincode"
                                                                    type="text"
                                                                    placeholder="Pincode"
                                                                    autoComplete="off"
                                                                    onFocus={e => this.changePlaceHoldClassAdd(e)}
                                                                    onBlur={e => this.changePlaceHoldClassRemove(e)}
                                                                    value={values.pincode}
                                                                />
                                                                {errors.pincode && touched.pincode ? (
                                                                <span className="errorMsg">{errors.pincode}</span>
                                                                ) : null}                                                   
                                                            </div>
                                                        </FormGroup>
                                                    </Col>
                                                    <Col sm={12} md={4} lg={4}>
                                                        <FormGroup>
                                                        <div className="formSection">
                                                                <Field
                                                                    name="area"
                                                                    component="select"
                                                                    autoComplete="off"
                                                                    value={values.area}
                                                                    className="formGrp"
                                                                >
                                                                <option value="">Select Area</option>
                                                                    <option value="area1">Area 1</option>
                                                                    <option value="area2">Area 2</option>
                                                                </Field>     
                                                                {errors.area && touched.area ? (
                                                                    <span className="errorMsg">{errors.area}</span>
                                                                ) : null}     
                                                                </div>
                                                        </FormGroup>
                                                    </Col>
                                                    <Col sm={12} md={4} lg={4}>
                                                        <FormGroup>
                                                            <div className="insurerName">
                                                                <Field
                                                                    name="state"
                                                                    type="text"
                                                                    placeholder="State"
                                                                    autoComplete="off"
                                                                    onFocus={e => this.changePlaceHoldClassAdd(e)}
                                                                    onBlur={e => this.changePlaceHoldClassRemove(e)}
                                                                    value={values.state}
                                                                />
                                                                {errors.state && touched.state ? (
                                                                <span className="errorMsg">{errors.state}</span>
                                                                ) : null}           
                                                            </div>
                                                        </FormGroup>
                                                    </Col>
                                                </Row>

                                                <div className="d-flex justify-content-left align-items-center m-b-40">
                                                
                                            <div className="proposr m-r-60"><p>Do you have an eIA number? 
                                            <OverlayTrigger overlay={<Tooltip id="tooltip-disabled">The e-Insurance account or Electronic Insurance Account offers policyholders online space to hold all their insurance policies electronically under one e-insurance account number. This allows the policyholder to access all their policies with a few clicks and no risk of losing the physical insurance policy</Tooltip>}>
                                            <a href="#" className="infoIcon"><img src={require('../../assets/images/i.svg')} alt="" /></a>
                                            </OverlayTrigger></p>
                            
                              
                                                </div>
                                            <div className="d-inline-flex">
                                                <div className="p-r-25">
                                                    <label className="customRadio3">
                                                    <Field
                                                        type="radio"
                                                        name='eIA'                                            
                                                        value='1'
                                                        key='1'  
                                                        onChange={(e) => {
                                                            setFieldValue(`eIA`, e.target.value);
                                                        }}
                                                        checked={values.eIA == '1' ? true : false}
                                                    />
                                                        <span className="checkmark " /><span className="fs-14"> Yes</span>
                                                    </label>
                                                </div>

                                                <div className="">
                                                    <label className="customRadio3">
                                                    <Field
                                                        type="radio"
                                                        name='eIA'                                            
                                                        value='0'
                                                        key='1'  
                                                        onChange={(e) => {
                                                            setFieldValue(`eIA`, e.target.value);
                                                        }}
                                                        checked={values.eIA == '0' ? true : false}
                                                    />
                                                        <span className="checkmark" />
                                                        <span className="fs-14">No</span>
                                                        {errors.eIA && touched.eIA ? (
                                                        <span className="errorMsg">{errors.eIA}</span>
                                                    ) : null}
                                                    </label>
                                                </div>
                                            </div>
                                        </div>
                                        <div className="d-flex justify-content-left resmb">
                                        <Button className={`backBtn`} type="button"  disabled={isSubmitting ? true : false} onClick= {this.sumInsured.bind(this, productId )}>
                                            {isSubmitting ? 'Wait..' : 'Back'}
                                        </Button> 
                                        <Button className={`proceedBtn`} type="submit"  disabled={isSubmitting ? true : false}>
                                            {isSubmitting ? 'Wait..' : 'Continue'}
                                        </Button> 
                                            
                                        </div>
                                        </Col>                                       
                                            <Col sm={12} md={3}>
                                                <div className="regisBox">
                                                    <h3 className="medihead">113 Operating Branches and Satellite Presence in 350+ locations </h3>
                                                </div>
                                            </Col>
                                        </Row>
                                        </Form>
                                        );
                                    }}
                                    </Formik>
                                    </div>
                                </section>
                            </div>
                        </div>
                    </div>
                </BaseComponent>
            </>
        );
    }
}

const mapStateToProps = state => {
    return {
      loading: state.loader.loading
    };
  };
  
  const mapDispatchToProps = dispatch => {
    return {
      loadingStart: () => dispatch(loaderStart()),
      loadingStop: () => dispatch(loaderStop())
    };
  };

export default withRouter (connect( mapStateToProps, mapDispatchToProps)(Address));